 private void start() {
   WssAntService wss = new WssAntService();
   WebRtcClient webRtcClient = new WebRtcClient(MainActivity.this, mCameraRenderer, mRemoteRenderer);

   wss.setListener(new WssAntService.WssAntEventListener() {
     @Override
     public void onConnected() {
       wss.commandJoinRoom();
     }

     @Override
     public void onMyStreamIdReceive(String myStreamId) {
      wss.commandPublishOwn(myStreamId);
     }

     @Override
     public void onRemoteStreamsIdReceive(List<String> remoteStreamsIds) {
      remoteStreamsIds.forEach(wss::commandPlayRemote);
     }

     @Override
     public void onStart() {
      //createPeer();
     }

     @Override
     public void onTakeCandidate(IceCandidate candidate) {
      //_peerConnection.addCandidate(candidate);
     }

     @Override
     public void onTakeConfiguration(SessionDescription sdp) {
      /*
      _peerConnection.setRemoteDescription(description);
        if (!widget.isHoster) {
          _peerConnection.createAnswer(_offerSdpConstraints).then((RTCSessionDescription answer) {
            _peerConnection.setLocalDescription(answer);
            sendData({"command": "takeConfiguration", "streamId": widget.streamId, "type": "answer", "sdp": answer.sdp});
          });
        }
      * */
     }
   });

   webRtcClient.setListener(new WebRtcClient.WebRtcEventsListener() {
     @Override
     public void onAddStream(MediaStream mediaStream) {
       //_stream = stream;
       //_videoRenderer.srcObject = stream;
     }

     @Override
     public void onRemoveStream(MediaStream mediaStream) {
      //_videoRenderer.srcObject = null;
     }

     @Override
     public void onIceCandidate(IceCandidate candidate) {
      wss.commandSendIceCandidate(candidate);
     }
   });

   webRtcClient.init();
   wss.initialize();
 }